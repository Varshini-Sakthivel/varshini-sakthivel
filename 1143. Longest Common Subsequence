class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
    
String ch1=text1;
String ch2=text2;
int m = ch1.length();
		int n = ch2.length();
		// dynamic array
		int dp[][] = new int[m + 1][n + 1];
		for (int i = 0; i < m + 1; i++) {
			for (int j = 0; j < n + 1; j++) {
				dp[i][j] = -1;
			}	
		}
		int answer = longCommonSubsq(ch1, ch2, m, n, dp);
		return answer;
	}

	static int longCommonSubsq(String ch1, String ch2, int m, int n, int[][] dp) {
		if (m == 0 || n == 0)
			return 0;
		if (dp[m][n] != -1)
			return dp[m][n];

		if (ch1.charAt(m - 1) == ch2.charAt(n - 1)) {
			int ans = 1 + longCommonSubsq(ch1, ch2, m - 1, n - 1, dp);
			return ans;
		} else {
			// check if char at string of first and last before char at string of second are equal
			int ans1 = longCommonSubsq(ch1, ch2, m - 1, n, dp);
			// check if char at string of second and last before char at string of first are equal
			int ans2 = longCommonSubsq(ch1, ch2, m, n - 1, dp);
			dp[m][n] = Math.max(ans1, ans2);
			return dp[m][n];
		}
	}

}
