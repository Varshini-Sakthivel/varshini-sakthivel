class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
      int e=equations.size();
      //int v=e+1;
      
      HashMap<String,Integer> map=new HashMap<>();
      int index=0;
       for (List<String> equation : equations) {
            if (!map.containsKey(equation.get(0))) {
                map.put(equation.get(0), index++);
            }
            if (!map.containsKey(equation.get(1))) {
                map.put(equation.get(1), index++);
            }
        }
      int n=map.size();
      double[][] adj=new double[n][n];
      for (double[] row : adj) {
            Arrays.fill(row, -1.0);
        }

      for(int i=0;i<equations.size();i++){
        int s = map.get(equations.get(i).get(0));
         int u = map.get(equations.get(i).get(1));
        adj[s][u]=values[i];
        adj[u][s]=1.0/values[i];
      } 
    
      double[] result = new double[queries.size()];
      for(int i=0;i<queries.size();i++){
        String st=queries.get(i).get(0);
        String ed=queries.get(i).get(1);
        if(!map.containsKey(st) || !map.containsKey(ed))
            result[i]=-1.0;
        else
        {
         int startIndex = map.get(st);
                int endIndex = map.get(ed);
                result[i] = dfs(adj, startIndex, endIndex, new boolean[n]);  
        }
        }
        return result;
       
    }
    private double dfs(double[][] adj, int start, int end, boolean[] visited) {
        if (adj[start][end] != -1.0) 
                return adj[start][end];
        visited[start] = true;
        
        for (int i = 0; i < adj.length; i++) {
            if (adj[start][i] != -1.0 && !visited[i]) {
                double productWeight = dfs(adj, i, end, visited);
                if (productWeight != -1.0) {
                    adj[start][end] = adj[start][i] * productWeight;
                    visited[start] = false;
                    return adj[start][end];
                }
            }
        }
    visited[start] = false;
        return -1.0;
    }
}
