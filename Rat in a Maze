public static boolean isSafe(int newx, int newy, int[][] m, int[][] vis, int n) {
        if (newx >= 0 && newx < n && newy >= 0 && newy < n && vis[newx][newy] == 0 && m[newx][newy] == 1) {
            return true;
        }
        return false;
    }

    public static void solve(int x, int y, int[][] m, int[][] vis, ArrayList<String> ans, int n, String s) {
        if (x == n - 1 && y == n - 1) {
            ans.add(s);
            return;
        }
        if (isSafe(x + 1, y, m, vis, n)) {
            vis[x][y] = 1;
            solve(x + 1, y, m, vis, ans, n, s + "D");
            vis[x][y] = 0;
        }
        if (isSafe(x, y - 1, m, vis, n)) {
            vis[x][y] = 1;
            solve(x, y - 1, m, vis, ans, n, s + "L");
            vis[x][y] = 0;
        }
        if (isSafe(x, y + 1, m, vis, n)) {
            vis[x][y] = 1;
            solve(x, y + 1, m, vis, ans, n, s + "R");
            vis[x][y] = 0;
        }
        if (isSafe(x - 1, y, m, vis, n)) {
            vis[x][y] = 1;
            solve(x - 1, y, m, vis, ans, n, s + "U");
            vis[x][y] = 0;
        }
    }

    public static ArrayList<String> findPath(int[][] m, int n) {
        ArrayList<String> ans = new ArrayList<>();
        if(m[0][0]==0) return ans;
        int[][] vis = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(vis[i], 0);
        }
        solve(0, 0, m, vis, ans, n, "");
        return ans;
    }
}

