
class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        long p=(long)m*k;
        if (p> bloomDay.length) {
            return -1;
        }

        // Binary search for the minimum number of days
        int lo = 1;
        int hi = Arrays.stream(bloomDay).max().getAsInt();
        while (lo <= hi) {
            int mid = (hi + lo) / 2;
            if (days(bloomDay, mid, k) >= m) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }

        return lo;
    }
        // Method to calculate how many bouquets can be made by day 'mid'
        public int days(int[] bloomDay, int mid, int k) {
            int bouquets = 0;
            int flowers = 0;
            for (int day : bloomDay) {
                if (day <= mid) {
                    flowers++;
                    if (flowers == k) {
                        bouquets++;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            return bouquets;
        }

        // Check if it's possible to make 'm' bouquets
        

   
    }

